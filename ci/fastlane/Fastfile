default_platform :ios

require 'base64'
require 'fileutils'

# Environment Variables
BAZEL_LOCAL_CACHE = ENV["BAZEL_LOCAL_CACHE"]
BAZEL_PATH = ENV["BAZEL_PATH"]
BAZEL_REMOTE_CACHE = ENV["BAZEL_REMOTE_CACHE"]
BAZEL_USER_ROOT = ENV["BAZEL_USER_ROOT"]
BUILD_WORKING_DIR = ENV["BUILD_WORKING_DIR"]
BUNDLE_ID = ENV["BUNDLE_ID"]
SIGN_URL = ENV["SIGN_URL"]
SOURCE_PATH = ENV["SOURCE_PATH"]
TEAM_ID = ENV["TEAM_ID"]

base_app_identifier_llc = BUNDLE_ID || "app.nicegram"
app_identifier_llc = [
  base_app_identifier_llc,
  base_app_identifier_llc + ".Widget",
  base_app_identifier_llc + ".NotificationContent",
  base_app_identifier_llc + ".SiriIntents",
  base_app_identifier_llc + ".Share",
  base_app_identifier_llc + ".NotificationService",
  base_app_identifier_llc + ".watchkitapp",
  base_app_identifier_llc + ".watchkitapp.watchkitextension",
  base_app_identifier_llc + ".BroadcastUpload"
]

lane :master_build do |options|
  # Load the app version from versions.json
  versions = JSON.parse(File.read("#{SOURCE_PATH}/versions.json"))
  app_version = versions["app"]

  build_number = 1 # Set a default build number or use another method to determine it

  sh("echo BUILD_NUMBER=#{build_number} >> $GITHUB_ENV")

  build(
    build_number: build_number,
    upload_to_tf: false
  )
end

lane :build do |options|
  build_number = options[:build_number]

  # Create temp keychain
  ensure_temp_keychain(name: ENV["KEYCHAIN_NAME"], password: ENV["KEYCHAIN_PASSWORD"])
  
  # Match certificates
  nicegram_match(type: "appstore")

  telegram_configuration_path = resolve_telegram_configuration(is_appstore_build: false)

  update_remote_config_defaults()

  # Build
  ipa_path = build_bazel(
    build_number: build_number,
    configuration_path: telegram_configuration_path,
    git_codesigning_repository: SIGN_URL,
    git_codesigning_type: "appstore"
  )

  # Delete temp keychain after build
  delete_keychain_if_exists(name: ENV["KEYCHAIN_NAME"])
end

lane :resolve_telegram_configuration do |options|
  is_appstore_build = options[:is_appstore_build] || false

  telegram_configuration_path = "#{BUILD_WORKING_DIR}/telegram-configuration.json"
  env_path = "#{SOURCE_PATH}/ng-env.txt"
  env = File.read(env_path)
  telegram_configuration_base64 = ""

  if env == "test"
    telegram_configuration_base64 = ENV["TELEGRAM_CONFIGURATION_TEST"]
  elsif env == "prod"
    telegram_configuration_base64 = ENV["TELEGRAM_CONFIGURATION_PROD"]
  else
    raise "Unknown environment in #{env_path}"
  end

  telegram_configuration_string = Base64.decode64(telegram_configuration_base64)
  telegram_configuration = JSON.parse(telegram_configuration_string)
  telegram_configuration["is_appstore_build"] = is_appstore_build

  File.write(telegram_configuration_path, JSON.pretty_generate(telegram_configuration))

  telegram_configuration_path
end

lane :build_bazel do |options|
  build_number = options[:build_number]
  configuration_path = options[:configuration_path]
  git_codesigning_repository = options[:git_codesigning_repository]
  git_codesigning_type = options[:git_codesigning_type]

  artifacts_path = "#{BUILD_WORKING_DIR}/artifacts"
  FileUtils.rm_rf(artifacts_path)
  FileUtils.mkdir(artifacts_path)

  shell_command = "cd #{SOURCE_PATH} && python3 build-system/Make/Make.py "

  unless BAZEL_PATH.nil?
    shell_command += "--bazel=#{BAZEL_PATH} "
  end

  unless BAZEL_USER_ROOT.nil?
    shell_command += "--bazelUserRoot=#{BAZEL_USER_ROOT} "
  end

  unless BAZEL_LOCAL_CACHE.nil?
    shell_command += "--cacheDir=#{BAZEL_LOCAL_CACHE} "
  end

  unless BAZEL_REMOTE_CACHE.nil?
    shell_command += "--cacheHost=#{BAZEL_REMOTE_CACHE} "
  end

  shell_command += "build \
  --configurationPath=#{configuration_path} \
  --gitCodesigningRepository=#{git_codesigning_repository} \
  --gitCodesigningType=#{git_codesigning_type} \
  --buildNumber=#{build_number} \
  --configuration=release_arm64 \
  --outputBuildArtifactsPath=#{artifacts_path} "

  error_callback = lambda do |result|
    raise "‚ùå Build script error\n#{result}"
  end

  sh shell_command, error_callback: error_callback

  ipa_path = "#{artifacts_path}/Telegram.ipa"
end

lane :ensure_temp_keychain do |options|
  name = options[:name]
  password = options[:password]

  delete_keychain_if_exists(name: name)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    timeout: 0
  )
end

lane :delete_keychain_if_exists do |options|
  name = options[:name]

  delete_keychain(name: name) if File.exist?(File.expand_path("~/Library/Keychains/#{name}-db"))
end
